------------------------------------------------------------------------
КОНСПЕКТ КУРСА: HTML и CSS

------------------------------------------------------------------------
4. Семантика и HTML5

Символы над строкой
<sup>

Символы под строкой
<sub>

Горизонтальная линия
<hr>

Перенос текста
<br>

HTML-сущности
для корректного отображения спецсимволов
&amp; для символа &
&#38; для символа &

Элементы семантической разметки
header, footer, nav, section, article

------------------------------------------------------------------------
5. Таблицы

Элементы таблицы
<table>, <tr>, <td>, <th>

------------------------------------------------------------------------
6. Формы

<form>
action - куда перенаправить после отправки Формы
method - метод при отправке GET, POST ...

<input>
type - text, date, color, email, password, checkbox, button, range 
radio (доолжен быть одинаковый name у группы)
name - наименование поля, которое будет отправлено на сервер
value - значние которое будет отправлено с name
<input type="number" name="num" id="num" min="1" max="5" step="1">
Input градусник
<input type="range" name="volume" id="num" min="1" max="5" step="1">

<label>
for - указывает на id к которому привязывается метка

Стандартная отправка Формы
<button type="submit">

Стандартная очиска Формы
<button type="reset">

Выпадающий список элементов
<select>
выпадающие элементы 
<option>
value - номер пункта
<optgroup>

Ввод многострочного большого текста
<textarea id="text" name="text" rows="10" cols="100"></textarea>

------------------------------------------------------------------------
9. CSS Selectors

Выбор по атрибуту
input[type="text"] {}

Выбор элемента внутри блока с классом .parent
.parent a 

Выбор дочернего элемента первого уровня
.parent > a

Выбор следующего соседнего элемента
.parent + div

------------------------------------------------------------------------
10. Псевдоклассы и элементы

Псевдоклассы
:hover :active :focus :valid :invalid :first-child :last-child

Псевдоклассы с параметрами
Выбор каждого второго элемента
:nth-child(2n)

Выбор каждого третьего элемента
:nth-child(3n)

Выбор нечетных элементов
:nth-child(2n-1)

Выбор всех абзацев, которые не имеют класс class-section-text
p:not(.class-section-text)

Псевдоэлементы 
::before ::after ::first-letter ::first-line ::selection

Стиль списков
Убрать точки списка
list-style-type: none; дополнительные стили: square, inside, qoutside

Изображение в качестве маркера 
list-style-image: url('../images/check.svg');

------------------------------------------------------------------------
11. Каскад

#id .class tag имеет специфичность 1,1,1

Наивысший приоритет специфичности
background-color: white !important;

------------------------------------------------------------------------
13. Поток документа

По умолчанию
position: static;

Относительное позиционирование
позиционируется относительно своей статичной позиционии.
position: relative

Относительно ближайшего родителя, кроме static
или если таких нет, то относительно документа
position: absolut;

Фиксирует в определенном месте viewport
на него не влияет прокрутка
position: fixed;

ледует за страницей до определённой точки и "липнет" 
в определенном месте.
работает внутри родительского блока его ширины и высоты
position: sticky;

------------------------------------------------------------------------
14. Еденицы измерения

em - равен высоте родительского шрифта
rem -равен высоте шрифта html корневого элемента
100vh - 100% от высоты viewport
100vw - 100% от ширины viewport

------------------------------------------------------------------------
15. Анимация

добавлять плавные переходы между различными 
состояниями элемента.
transition: [свойства анимации] [время] [тип функции временной кривой] [задержка];
transition: background-color 1s ease 1s;

transition-timing-function
linear: равномерная скорость изменения.
ease: стандартное (мягкое) ускорение в начале и замедление в конце.
ease-in: ускорение в начале.
ease-out: замедление в конце.
ease-in-out: ускорение в начале и замедление в конце.

animation и @keyframes — это две связанные концепции в CSS, 
используемые для создания анимаций на веб-страницах.
animation: [имя анимации] [длительность] [тип функции временной кривой] [задержка] [количество повторов] [направление];

@keyframes example {
    0% {
        background-color: blue; /* Исходный цвет */
        transform: translateX(0); /* Начальная позиция */
    }
    50% {
        background-color: green; /* Цвет на середине анимации */
        transform: translateX(100px); /* Перемещение вправо */
    }
    100% {
        background-color: red; /* Конечный цвет */
        transform: translateX(0); /* Возвращение в исходную позицию */
    }
}

.animation-box {
    width: 100px;
    height: 100px;
    background-color: blue;
    animation: example 2s ease-in-out infinite; /* Применение анимации */
}

------------------------------------------------------------------------
16. Адаптивная верстка

------------------------------------------------------------------------
17. CSS Flex

Блочный контейнер на всю ширину
display: flex;

Строчный контейнер
display: inline-flex;

Переопределяет основню ось в вертикальное направление
flex-direction: column;

Перенос элементов на новую строку запрещен
flex-wrap: nowrap;

Паддинги и бордеры учитываются внутри элемента
box-sizing: border-box;

Объединяет два свойства flex-direction и flex-wrap
flex-flow: column nowrap;

Выравнивание всего flex-контейнера внутри контейнера
justify-content: center;
align-content: center;

Выравнивание всех элементов в пределах строки
justify-items: center;
align-items: center;

Выравнивание конкретного элемента
justify-self: center;
align-self: center;

Размер ячейки по основной оси
flex-basis: 300px;

Пропорция увеличения элемента при свободном пространстве
flex-grow: 1;

Пропорция сжатия элемента при свободном пространстве
flex-shrink: 1;

Короткая запись flex: <flex-grow> <flex-shrink> <flex-basis>;
flex: 1 1 300px;

Отступы между элементами flex сетки
gap: 10px;
row-gap: 10px;
column-gap: 10px;
gap: 10px 10px;

Позволяет отцентрировать блок по середине листа за счет auto margin
width: 1200px;
margin: 0 auto;

------------------------------------------------------------------------
21. CSS Grid

Устанавливает высоту для всех строк, не включенных в grid-template-rows.
grid-auto-rows: 100px 200px;

Меняем направление перетекания с вертикального на горизонтальное. 
Элементы начинают добавляться в новую колонку вместо новой строки.
grid-auto-flow: column;

Свойство заполняет пустые ячейки при использовании grid-column: span 2;
grid-auto-flow: dense;

Автоматически создает три колонки размером 1 фракция (ширина без учета gap)
grid-template-colimns: repeat(3, 1fr);

Занятие несколько позиций элементом в grid контейнере
grid-column: span 2;
grid-row: span 2;

grid-column: 1 / 2;
grid-column: 1 / -1;
grid-column: s-left / sidebar;

auto-fill будет создавать столько колонок по 100 пикселей, сколько поместится.
если не будут влезать, то перенесет на новую строку.
grid-template-columns: repeat(auto-fill, 100px);

auto-fit создаст только необходимые колонки для размещения 4 элементов.
если не будут влезать, то перенесет на новую строку.
grid-template-columns: repeat(auto-fit, 100px);

Функция min-max задает минимальную и максимальную ширину колонки, 
позволяя сетке адаптивно реагировать на изменение ширины экрана.

Если свободное пространство меньше 150px то колонки растянутся и заполнят
пространство, а если превысит, то они снова станут 150px и создастся новая, 
пустая колонка 150px
grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));

Будет бесконечно растягивать ячейки по всей ширине контейнера,
а если будет меньше 150px на ячейку, то перенесет на новую строку.
grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));

Изменение порядка в сетке grid, один элемент с 1 перемещает в конец,
так как у всех остальных элементов по умолчанию 0
order: 1;

Выравнивание всего грида внутри грид-контейнера
justify-content: center;
align-content: center;

Выравнивание всех элементов в ячейках всего грида
justify-items: center;
align-items: center;

Выравнивание конкретного элемента внутри ячейки грида
justify-self: center;
align-self: center;

Шаблон пространсва грид
grid-template-areas: 
"a a a"
"b b ."
"c . c";

добавляется в класс элемента
grid-area: a;

-------------------------------------------------------------------------
22. Проект-практика Grid

Запрещает перенос на новую строку при сжатии блока
white-space: nowrap;

Добавляет скролл когда не влезает в экран
overflow: scroll;

Добавляет отрицательный отступ который компенсирует положительный отступ 
родительского элемента, создает эффект скртия за экран
margin-right: -24px;

Удалить скроллбары
для Firefox
scrollbar-width: 0;

для всех остальных 
.chip_wrapper::-webkit-scrollbar {
	display: none;
}